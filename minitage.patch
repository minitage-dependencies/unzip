diff -Nur unzip60/unix/Makefile unzip60.new/unix/Makefile
--- unzip60/unix/Makefile	2009-01-18 23:41:18.000000000 +0100
+++ unzip60.new/unix/Makefile	2013-04-16 14:36:19.000000000 +0200
@@ -47,19 +47,18 @@
 AS = as
 LOC = $(D_USE_BZ2) $(LOCAL_UNZIP)
 AF = $(LOC)
-CFLAGS = -O
 CF_NOOPT = -I. -I$(IZ_BZIP2) -DUNIX $(LOC)
 CF = $(CFLAGS) $(CF_NOOPT)
 LFLAGS1 =
-LF = -o unzip$E $(LFLAGS1)
-LF2 = -s
+LF = $(LDFLAGS) -o unzip$E $(LFLAGS1)
+LF2 = 
 
 # UnZipSFX flags
-SL = -o unzipsfx$E $(LFLAGS1)
+SL = $(LDFLAGS) -o unzipsfx$E $(LFLAGS1)
 SL2 = $(LF2)
 
 # fUnZip flags
-FL = -o funzip$E $(LFLAGS1)
+FL = $(LDFLAGS) -o funzip$E $(LFLAGS1)
 FL2 = $(LF2)
 
 # general-purpose stuff
@@ -70,7 +69,7 @@
 CHMOD = chmod
 BINPERMS = 755
 MANPERMS = 644
-STRIP = strip
+STRIP =true
 E =
 O = .o
 M = unix
@@ -92,12 +91,11 @@
 IZ_BZIP2 = $(IZ_OUR_BZIP2_DIR)
 ## The following symbols definitions need to be set to activate bzip2 support:
 #D_USE_BZ2 = -DUSE_BZIP2
-#L_BZ2 = -lbz2
+L_BZ2 = -lbz2
 #LIBBZ2 = $(IZ_BZIP2)/libbz2.a
 
 # defaults for unzip's "built-in" bzip2 library compilation
 CC_BZ = $(CC)
-CFLAGS_BZ = $(CFLAGS)
 
 # object files
 OBJS1 = unzip$O crc32$O $(CRCA_O) crypt$O envargs$O explode$O
@@ -121,7 +119,7 @@
 INSTALL_D = mkdir -p
 # on some systems, manext=l and MANDIR=/usr/man/man$(manext) may be appropriate
 manext = 1
-prefix = /usr/local
+prefix = $(PREFIX)
 BINDIR = $(prefix)/bin#			where to install executables
 MANDIR = $(prefix)/man/man$(manext)#	where to install man pages
 INSTALLEDBIN = $(BINDIR)/funzip$E $(BINDIR)/unzip$E $(BINDIR)/unzipsfx$E \
@@ -302,7 +300,7 @@
 $(IZ_OUR_BZIP2_DIR)/libbz2.a:
 	@echo "Building/updating bzip2 object library..."
 	( cd $(IZ_OUR_BZIP2_DIR) ; $(MAKE) -f Makebz2.iz CC="$(CC_BZ)"\
-	 CFLAGS="$(CFLAGS_BZ)" RM="rm -f" )
+	 CFLAGS="$(CFLAGS) $(CFLAGS_BZ)" RM="rm -f" )
 
 
 crc32$O:	crc32.c $(UNZIP_H) zip.h crc32.h
@@ -594,7 +592,7 @@
 	@echo\
  'which is UnZip linked with the DLL).  This target is an example only.'
 	@echo ""
-	$(MAKE) objsdll CC=gcc CFLAGS="-O3 -Wall -fPIC -DDLL"
+	$(MAKE) objsdll CC=gcc CFLAGS="$(CFLAGS) -O3 -Wall -fPIC -DDLL"
 	gcc -shared -Wl,-soname,libunzip.so.0 -o libunzip.so.0.4 $(OBJSDLL)
 	$(RM) libunzip.so.0 libunzip.so
 	$(LN) -s libunzip.so.0.4 libunzip.so.0
@@ -694,7 +692,7 @@
 	$(MAKE) unzips CF="$(CF) -DNO_DIR -DNO_MKDIR -DNO_STRNICMP -DNO_UID_GID -DNO_FCHMOD -DNO_LCHOWN -DNO_LCHMOD -DCBREAK=2"
 
 7300_gcc:	unix_make
-	$(MAKE) unzips CC=gcc LD=gcc LF2="" CFLAGS="-O2" \
+	$(MAKE) unzips CC=gcc LD=gcc LF2="" CFLAGS="$(CFLAGS) -O2" \
 	 LOC="-DNO_DIR -DNO_MKDIR -DNO_STDLIB_H -DNO_STRNICMP -DNO_UID_GID -DNO_FCHMOD -DNO_LCHOWN -DNO_LCHMOD -DCBREAK=2 $(LOC)"
 	$(STRIP) $(UNZIPS)
 
@@ -717,29 +715,29 @@
 bsdi:		unix_make
 	@echo 'NOTE:  use bsdi_noasm target for non-Intel BSD/OS compiles.'
 	$(MAKE) unzips CC=gcc2 LD=shlicc2 AS=gcc2\
-	 CFLAGS="-O3 -Wall -DASM_CRC -DBSD" CRCA_O=crc_gcc$O
+	 CFLAGS="$(CFLAGS) -O3 -Wall -DASM_CRC -DBSD" CRCA_O=crc_gcc$O
 
 # BSDI BSD/OS
 bsdi_noasm:	unix_make
 #	@echo 'NOTE:  use bsd target for non-Intel BSD/OS compiles.'
 	$(MAKE) unzips CC=gcc2 LD=shlicc2 AS=gcc2\
-	 CFLAGS="-O3 -Wall -DBSD"
+	 CFLAGS="$(CFLAGS) -O3 -Wall -DBSD"
 
 # Coherent 3.x/4.x, Mark Williams C.  ``For Coherent's CC, it needs either
 # -T0 or -T150000 (or bigger) added to the CFLAGS, otherwise the compiler
 # runs out of memory and dies in zipinfo.c.'' [Fred "Fredex" Smith, 940719]
 coherent:	unix_make
-	$(MAKE) unzips CFLAGS="$(CFLAGS) -T0 -DNO_LCHOWN -DNO_LCHMOD"
+	$(MAKE) unzips CFLAGS="$(CFLAGS) $(CFLAGS) -T0 -DNO_LCHOWN -DNO_LCHMOD"
 
 # Cray-2, Y-MP or C90, running Unicos 5.x to 8.x (SysV + BSD enhancements)
 # and Standard (ANSI) C compiler 3.0 or later.
 cray_opt:	unix_make
-	$(MAKE) unzips CFLAGS="$(CFLAGS) -h scalar3 -h vector3 -DNO_LCHOWN -DNO_LCHMOD"
+	$(MAKE) unzips CFLAGS="$(CFLAGS) $(CFLAGS) -h scalar3 -h vector3 -DNO_LCHOWN -DNO_LCHMOD"
 
 # The unzip41 build on a Cyber 910/SGI running Irix v3.3.3 was successful
 # with the following change to Makefile:
 cyber_sgi:	unix_make
-	$(MAKE) unzips CFLAGS="$(CFLAGS) -I/usr/include/bsd -DNO_LCHOWN -DNO_LCHMOD"\
+	$(MAKE) unzips CFLAGS="$(CFLAGS) $(CFLAGS) -I/usr/include/bsd -DNO_LCHOWN -DNO_LCHMOD"\
 	 LF="-lbsd $(LF)" SL="-lbsd $(SL)"
 
 # The Cygwin environment on a Win32 system, treated as an UNIX emulator.
@@ -747,7 +745,7 @@
 # Info-ZIP recommends using "win32/Makefile.gcc" instead.
 cygwin:		unix_make
 	$(MAKE) unzips CC=gcc LD=gcc AS=gcc\
-	 CFLAGS="-O3 -DASM_CRC -DNO_LCHOWN -DNO_LCHMOD"\
+	 CFLAGS="$(CFLAGS) -O3 -DASM_CRC -DNO_LCHOWN -DNO_LCHMOD"\
 	 AF="-Di386 $(AF)" CRCA_O=crc_gcc$O\
 	 E=".exe" CP="cp" LN="ln -s"
 
@@ -758,13 +756,13 @@
 #  -X9 = warnings if a function is used without a declaration
 #
 dnix:		unix_make
-	$(MAKE) unzips CFLAGS="$(CFLAGS) -X7 -X9 -DDNIX"
+	$(MAKE) unzips CFLAGS="$(CFLAGS) $(CFLAGS) -X7 -X9 -DDNIX"
 
 # FreeBSD on Intel:
 freebsd:		unix_make
 	@echo 'NOTE:  use bsd target for non-Intel FreeBSD compiles (if any).'
 	$(MAKE) unzips CC=gcc LD=gcc AS=gcc\
-	 CFLAGS="-O3 -Wall -DASM_CRC -DBSD"\
+	 CFLAGS="$(CFLAGS) -O3 -Wall -DASM_CRC -DBSD"\
 	 AF="-Di386 $(AF)" CRCA_O=crc_gcc$O
 
 # Generic BSDish Unix gcc.  ``The -O3 only works with later versions of gcc;
@@ -775,25 +773,25 @@
 # with "echo" instead).
 #
 gcc:		unix_make
-	$(MAKE) unzips CC=gcc LD=gcc CFLAGS="-O3" LF2=""
+	$(MAKE) unzips CC=gcc LD=gcc CFLAGS="$(CFLAGS) -O3" LF2=""
 	$(STRIP) $(UNZIPS)
 
 # Heurikon HK68 (68010), UniPlus+ System V 5.0, Green Hills C-68000
 hk68:		unix_make
 	$(MAKE) unzips CC="gcc" LD="gcc"\
 	 LF="-n $(LF)" SL="-n $(SL)" FL="-n $(FL)"\
-	 CFLAGS="-ga -X138 -Dlocaltime=localti -Dtimezone=timezon"
+	 CFLAGS="$(CFLAGS) -ga -X138 -Dlocaltime=localti -Dtimezone=timezon"
 
 # ISC Unix on 386 platform
 isc:		unix_make
 	$(MAKE) unzips LF2="-lc_s $(LF2)" CRCA_O=crc_sysv$O \
-	 CFLAGS="-O" LOC="-DASM_CRC -DSYSV -DNO_UID_GID -DNEED_PTEM -DNO_LCHOWN -DNO_LCHMOD $(LOC)" \
+	 CFLAGS="$(CFLAGS) -O" LOC="-DASM_CRC -DSYSV -DNO_UID_GID -DNEED_PTEM -DNO_LCHOWN -DNO_LCHMOD $(LOC)" \
 	 AF="-DNO_UNDERLINE -Djecxz=jcxz -DALIGNMENT='.align 16' $(AF)"
 
 isc_gcc:	unix_make
 	$(MAKE) unzips AS=gcc CC=gcc LD=gcc CRCA_O=crc_gcc$O \
 	 LF="-shlib $(LF)" SL="-shlib $(SL)" FL="-shlib $(FL)" LF2="" \
-	 CFLAGS="-O3" LOC="-DSYSV -DASM_CRC -DNO_UID_GID -DNEED_PTEM -DNO_LCHOWN -DNO_LCHMOD $(LOC)" \
+	 CFLAGS="$(CFLAGS) -O3" LOC="-DSYSV -DASM_CRC -DNO_UID_GID -DNEED_PTEM -DNO_LCHOWN -DNO_LCHMOD $(LOC)" \
 	 AF="-DNO_UNDERLINE -Djecxz=jcxz -DALIGNMENT='.align 16' $(AF)"
 	$(STRIP) $(UNZIPS)
 
@@ -809,7 +807,7 @@
 linux:		unix_make
 	@echo 'NOTE:  use linux_noasm target for non-Intel Linux compiles.'
 	$(MAKE) unzips CC=gcc LD=gcc AS=gcc\
-	 CFLAGS="-O3 -Wall -DASM_CRC"\
+	 CFLAGS="$(CFLAGS) -O3 -Wall -DASM_CRC"\
 	 AF="-Di386 $(AF)" CRCA_O=crc_gcc$O
 # GRR:  this echo is pointless; if user gets this far, no difference to install
 #	@echo 'Be sure to use the install_asm target rather than the install target'
@@ -819,19 +817,19 @@
 # Linux (Posix, approximately SysV):  virtually any version since before 0.96,
 # for any platform.  Change "-O" to "-O3" or whatever, as desired...
 linux_noasm:	unix_make
-	$(MAKE) unzips CC=gcc LD=gcc CFLAGS="-O -Wall"
+	$(MAKE) unzips CC=gcc LD=gcc CFLAGS="$(CFLAGS) -O -Wall"
 
 # Linux with lcc compiler:  __inline__ (stat.h) not recognized, and must edit
 # /usr/include/gnu/types.h to get rid of "long long" if __LCC__ defined.  -O3
 # (or -O2 or -O) is ignored.  [GRR 960828: test target only]
 #
 linux_lcc:	unix_make
-	$(MAKE) unzips CC=lcc LD=lcc CFLAGS="-O3 -Wall -D__inline__= "
+	$(MAKE) unzips CC=lcc LD=lcc CFLAGS="$(CFLAGS) -O3 -Wall -D__inline__= "
 
 # Linux host with go32 (djgpp) cross-compiler (go32crs.tgz) for 32-bit DOS.
 linux_dos:	unix_make
 	$(MAKE) unzips CC=go32gcc LD=go32gcc M=msdos OSDEP_H="msdos/doscfg.h" \
-	 CFLAGS="-O2 -Wall"
+	 CFLAGS="$(CFLAGS) -O2 -Wall"
 #	go32-strip unzip
 #	Due to limitations of the cross-compiling package, this has to be
 #	done manually:
@@ -845,7 +843,7 @@
 # library).
 #
 linux_shlib:	unix_make
-	$(MAKE) objsdll CC=gcc CFLAGS="-O3 -Wall -fPIC"\
+	$(MAKE) objsdll CC=gcc CFLAGS="$(CFLAGS) -O3 -Wall -fPIC"\
 	 LOC="-DDLL -DASM_CRC $(LOC)"\
 	 AS=gcc AF="-fPIC -Di386 $(AF)" CRCA_O=crc_gcc$O
 	gcc -shared -Wl,-soname,libunzip.so.0 -o libunzip.so.0.4 $(OBJSDLL)\
@@ -859,7 +857,7 @@
 # instead of the original UnZip version.  (libz was libgz prior to 0.94)
 linux_shlibz:	unix_make
 	$(MAKE) objsdll CC=gcc AS=gcc AF="-fPIC -Di386 $(AF)" CRCA_O=crc_gcc$O\
-	 CFLAGS="-O3 -Wall -fPIC" LOC="-DDLL -DUSE_ZLIB -DASM_CRC $(LOC)"
+	 CFLAGS="$(CFLAGS) -O3 -Wall -fPIC" LOC="-DDLL -DUSE_ZLIB -DASM_CRC $(LOC)"
 	gcc -shared -Wl,-soname,libunzip.so.0 -o libunzip.so.0.4 $(OBJSDLL)\
 	 crc_gcc.pic.o
 	ln -sf libunzip.so.0.4 libunzip.so.0
@@ -872,12 +870,12 @@
 
 # Macintosh MacOS X (Unix-compatible enviroment), using standard compiler
 macosx:	unix_make
-	$(MAKE) unzips CFLAGS="-O3 -Wall -DBSD" LF2=""
+	$(MAKE) unzips CFLAGS="$(CFLAGS) -O3 -Wall -DBSD" LF2=""
 	$(STRIP) $(UNZIPS)
 
 # Macintosh MacOS X (Unix-compatible enviroment), using gcc
 macosx_gcc:	unix_make
-	$(MAKE) unzips CC=gcc CFLAGS="-O3 -Wall -DBSD" LF2=""
+	$(MAKE) unzips CC=gcc CFLAGS="$(CFLAGS) -O3 -Wall -DBSD" LF2=""
 	$(STRIP) $(UNZIPS)
 
 # Minix 1.5 PC for the 386.  Invoke as is to use default cc, or as "make
@@ -914,12 +912,12 @@
 
 # NeXT 3.x: as above, plus better optimization.
 next3x:		unix_make
-	$(MAKE) unzips CFLAGS="-O2" LF2="-object -s"
+	$(MAKE) unzips CFLAGS="$(CFLAGS) -O2" LF2="-object -s"
 
 # NeXT 3.1+: make the executable fat (multi-architecture binary [MAB],
 # for "black" [NeXT] and "white" [x86] hardware, so far).
 nextfat:	unix_make
-	$(MAKE) unzips CFLAGS="-O2 -arch i386 -arch m68k" \
+	$(MAKE) unzips CFLAGS="$(CFLAGS) -O2 -arch i386 -arch m68k" \
 	 LF2="-arch i386 -arch m68k -object -s"
 
 # IBM OS/390 (formerly MVS) compiled under "OpenEdition" shell
@@ -972,7 +970,7 @@
 # recognize the -M0 flag that forces 8086 code.)  (GRR:  may need to reduce
 # stack to 0c00h if using 286/small-model code...?)
 sco_dos:	unix_make
-	$(MAKE) unzips CFLAGS="-O -dos -M0" M=msdos OSDEP_H="msdos/doscfg.h" \
+	$(MAKE) unzips CFLAGS="$(CFLAGS) -O -dos -M0" M=msdos OSDEP_H="msdos/doscfg.h" \
 	 LF="-dos -F 2000" LF2="-o unzip.exe" \
 	 FL="-dos" FL2="-o funzip.exe" SL="-dos" SL2="-o unzipsfx.exe"
 
@@ -1000,7 +998,7 @@
 
 # Generic System V + GNU C
 sysv_gcc:	unix_make
-	$(MAKE) unzips CC=gcc LD=gcc CFLAGS="-O2 -DSYSV" LF2=""
+	$(MAKE) unzips CC=gcc LD=gcc CFLAGS="$(CFLAGS) -O2 -DSYSV" LF2=""
 	$(STRIP) $(UNZIPS)
 
 # AT&T 6300+, System V.2 Unix:  run-time out-of-memory error if don't use -Ml;
